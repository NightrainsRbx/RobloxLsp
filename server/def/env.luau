type ENV = {
	game: DataModel,
	getmetatable: (t: table) -> table?,
	error: (message: any, level: number?) -> (),
	debug: {
		info:
			((thread: thread, level: number, options: string) -> ...any)
			& ((functionOrLevel: function | number, options: string) -> ...any),
		traceback:
			((level: number?) -> string)
			& ((message: string, level: number?) -> string)
			& ((thread: thread, message: string, level: number?) -> string),
		profilebegin: (label: string) -> (),
		profileend: () -> (),
		setmemorycategory: (tag: string) -> (),
		resetmemorycategory: () -> (),
	},
	task: {
		defer: (f: function | thread, ...any) -> any,
		desynchronize: () -> (),
		spawn: (f: function | thread, ...any) -> any,
		synchronize: () -> (),
		delay: (sec: number?, f: function | thread, ...any) -> any,
		wait: (sec: number?) -> number,
		cancel: (thread: thread) -> ()
	},
	tonumber: (value: any, radix: number?) -> number,
	pcall: (f: function, ...any) -> (boolean, ...any),
	Enum: Enums,
	collectgarbage: (mode: string) -> number,
	utf8: {
		char: (code: number, ...number) -> string,
		charpattern: string,
		codes: (s: string) -> function,
		codepoint: (s: string, i: number?, j: number?) -> (number, ...number),
		len: (s: string, i: number?, j: number?) -> (number?, number?),
		offset: (s: string, n: number?, i: number?) -> number,
		graphemes: (str: string, i: number?, j: number?) -> function,
		nfcnormalize: (str: string) -> string,
		nfdnormalize: (str: string) -> string,
	},
	getfenv: (target: any?) -> { [string]: any },
	plugin: Plugin,
	pairs: (t: table) -> ((table, any?) -> (any, any), table, nil),
	gcinfo: () -> number,
	ypcall: (f: function, ...any) -> (boolean, ...any),
	xpcall: (f: function, err: function, ...any) -> (boolean, ...any),
	workspace: Workspace,
	_VERSION: string,
	string: {
		pack: (fmt: string, ...any) -> string,
		packsize: (fmt: string) -> number,
		rep: (s: string, n: number) -> string,
		reverse: (s: string) -> string,
		sub: (s: string, i: number, j: number?) -> string,
		unpack: (fmt: string, s: string, pos: number?) -> ...any,
		upper: (s: string) -> string,
		split: (s: string, separator: string?) -> { string },
		byte: (s: string, i: number?, j: number?) -> ...number,
		char: (byte: number, ...number) -> string,
		find: (s: string, pattern: string, init: number?, plain: boolean?) -> (number?, number?),
		format: (s: string, ...any) -> string,
		gmatch: (s: string, pattern: string) -> () -> ...string,
		gsub: (
			s: string,
			pattern: string,
			repl: string | { [string]: string } | ((...string) -> string),
			n: number?
		) -> (string, number),
		len: (s: string) -> number,
		lower: (s: string) -> string,
		match: (s: string, pattern: string, init: number?) -> string?,
	},
	warn: (...any) -> (),
	UserSettings: () -> UserSettings,
	tostring: (value: any) -> string,
	wait: (seconds: number?) -> (number, number),
	unpack: (list: table, i: number?, j: number?) -> ...any,
	tick: () -> number,
	newproxy: (addmt: boolean) -> any,
	time: () -> number,
	elapsedTime: () -> number,
	table: {
		maxn: (t: table) -> number,
		find: (t: table, value: any, init: number?) -> number?,
		foreach: (t: table, f: (any, any) -> ()) -> (),
		foreachi: (t: table, f: (number, any) -> ()) -> (),
		getn: (t: table) -> number,
		concat: (t: table, sep: string?, i: number?, j: number?) -> string,
		insert:
			((t: table, value: any) -> ())
			& ((t: table, pos: number, value: any) -> ()),
		move: (a1: table, f: number, e: number, t: number, a2: table?) -> (),
		pack: (...any) -> { n: number, [number]: any },
		remove: (t: table, pos: number?) -> any?,
		sort: (t: table, comp: ((any, any) -> boolean)?) -> (),
		unpack: (t: table, i: number?, j: number?) -> ...any,
		clear: (t: table) -> (),
		clone: (t: table) -> table,
		create: (count: number, value: any?) -> table,
		freeze: (t: table) -> table,
		isfrozen: (t: table) -> boolean
	},
	setfenv: (target: function | number, env: { [string]: any }) -> function?,
	os: {
		clock: () -> number,
		date: (format: string?, time: number?) -> string | DateTypeResult,
		difftime: (t2: number | DateTypeResult, t1: number | DateTypeResult) -> number,
		time: (t: DateTypeArg?) -> number,
	},
	type: (value: any) -> string,
	ipairs: (t: table) -> ((table, number) -> (number, any), table, number),
	coroutine: {
		create: (f: function) -> thread,
		isyieldable: () -> boolean,
		resume: (co: thread, ...any) -> (boolean, ...any),
		running: () -> thread,
		status: (co: thread) -> string,
		wrap: (f: function) -> function,
		yield: (...any) -> ...any,
		close: (thread: thread) -> (boolean, ...any),
	},
	shared: any,
	typeof: (value: any) -> string,
	spawn: (callback: function) -> (),
	_G: table,
	settings: () -> GlobalSettings,
	require: (module: any) -> any,
	bit32: {
		lshift: (x: number, disp: number) -> number,
		rrotate: (x: number, disp: number) -> number,
		rshift: (x: number, disp: number) -> number,
		arshift: (x: number, disp: number) -> number,
		band: (...number) -> number,
		bnot: (x: number) -> number,
		bor: (...number) -> number,
		btest: (x: number, ...number) -> boolean,
		bxor: (...number) -> number,
		extract: (n: number, field: number, width: number?) -> number,
		replace: (n: number, v: number, field: number, width: number?) -> number,
		lrotate: (x: number, disp: number) -> number,
	},
	select: (index: string | number, ...any) -> any,
	setmetatable: (table: table, metatable: table | nil) -> table,
	rawset: (table: table, index: any, value: any) -> table,
	rawget: (table: table, index: any) -> any,
	rawlen: (obj: string | table) -> number,
	rawequal: (v1: any, v2: any) -> boolean,
	print: (...any) -> (),
	math: {
		exp: (x: number) -> number,
		floor: (x: number) -> number,
		fmod: (x: number, y: number) -> number,
		frexp: (x: number) -> (number, number),
		huge: number,
		ldexp: (m: number, e: number) -> number,
		log: (x: number, base: number?) -> number,
		log10: (x: number) -> number,
		max: (x: number, ...any) -> number,
		min: (x: number, ...any) -> number,
		abs: (x: number) -> number,
		modf: (x: number) -> (number, number),
		pi: number,
		pow: (x: number, y: number) -> number,
		rad: (x: number) -> number,
		random: (m: number?, n: number?) -> number,
		randomseed: (x: number) -> (),
		sin: (x: number) -> number,
		sinh: (x: number) -> number,
		sqrt: (x: number) -> number,
		tan: (x: number) -> number,
		acos: (x: number) -> number,
		tanh: (x: number) -> number,
		clamp: (n: number, min: number, max: number) -> number,
		noise: (x: number, y: number, z: number) -> number,
		sign: (x: number) -> number,
		round: (x: number) -> number,
		asin: (x: number) -> number,
		atan: (y: number) -> number,
		atan2: (y: number, x: number) -> number,
		ceil: (x: number) -> number,
		cos: (x: number) -> number,
		cosh: (x: number) -> number,
		deg: (x: number) -> number,
	},
	next: (t: table, lastKey: any?) -> (any, any),
	loadstring: (src: string, chunkname: string?) -> (function?, string?),
	delay: (delayTime: number?, callback: function) -> (),
	script: LuaSourceContainer,
	assert: (value: any, errorMessage: string?) -> any,
}

type DateTypeArg = {
	day: number?,
	hour: number?,
	isdst: boolean?,
	min: number?,
	month: number?,
	sec: number?,
	wday: number?,
	yday: number?,
	year: number?,
}

type DateTypeResult = {
	day: number,
	hour: number,
	isdst: boolean,
	min: number,
	month: number,
	sec: number,
	wday: number,
	yday: number,
	year: number,
}
